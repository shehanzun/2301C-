总结:
什么是原型?
原型是function对象的一个属性，定义了构造函数创造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。

什么是prototype?
显示原型，是函数 (不包含箭头函数)本身存在的一个属性，他指向的是一个对象，即为原型对象.
什么是_proto__?
可以称为隐式原型，或者叫连接点。是对象的一个属性，它里面存储的是该构造函数的原型对象，即prototype
什么是构造函数?
构造函数其实是一种特殊的函数，主要用来初始化对象，也就是为对象成员变量赋初始值，它总与new关键字一起使用
什么是原型链?
当我们访问一个实例(例如person)的属性或方法时，会先在当前 实例 上查找，若查找不到，会到 原型 上查找，若原型上查找不到就到 原型的原型 上查找，若还是查找不到就指向 null 。


如果方法不放在原型上继承的缺点:
如果方法不放在原型上面的话，构造函数创建对象的时候，当构造函数的方法很多的时候，其结构很几余复杂
每次实例一个对象，都需要开辟一个空间，造成内存严重浪费
每一个对象的属性和方法都是独立的，不会互相影响，这就无法做到数据共享
原型优点:
可以让构造函数结构变得简单
可以节省内存的空间
每一个实例可以共享原型上的方法和属性，达成数据共享
原型缺点:
因为数据存在共享，所以可以被修改或者覆盖



原型链

总结:当我们访问一个实例(例如person)的属性或方法时，会先在当前 实例 上查找，若查找不到，会到 原型 上查找，若原型上查找不到，就到 原型的原型 上查找，若还是查找不到就指向 null


创建对象的5个方法

字面量创建，构造函数创建，Object.create()，工厂函数创建，原型模式创建